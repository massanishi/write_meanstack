var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(t,n){o.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(o,t,n){o.login=function(e,s){t.login(e,s).then(function(t){console.log("logged in"),o.$emit("login",t.data),n.url("/")},function(o){console.log(o)})}}]),app.controller("PostsCtrl",["$scope","PostsSvc",function(o,t){t.fetch().success(function(t){console.log(t),o.posts=t}),o.addPost=function(){o.postBody&&t.create({username:"dickeyxxx",body:o.postBody}).success(function(t){o.postBody=null})},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})})}]),app.service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("api/users")},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})}}]),angular.module("app").run(["$rootScope","$timeout",function(o,t){!function n(){var e="ws://localhost:3000",s=new WebSocket(e);s.onclose=function(o){console.log("Websocket closed. Reconnecting..."),t(n,1e4)},s.onmessage=function(t){console.log(t);var n=JSON.parse(t.data);o.$broadcast("ws:"+n.topic,n.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIiwid2Vic29ja2V0cy5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwiJGxvY2F0aW9uIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsIiRlbWl0IiwiZGF0YSIsInVybCIsImVycm9yIiwiUG9zdHNTdmMiLCJmZXRjaCIsInN1Y2Nlc3MiLCJwb3N0cyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJwb3N0IiwiJGFwcGx5IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImdldFVzZXIiLCJ2YWwiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsInJ1biIsIiRyb290U2NvcGUiLCIkdGltZW91dCIsImNvbm5lY3QiLCJjb25uZWN0aW9uIiwiV2ViU29ja2V0Iiwib25jbG9zZSIsImUiLCJvbm1lc3NhZ2UiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiJGJyb2FkY2FzdCIsInRvcGljIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLE9BQUEsV0NBQUQsU0FBQUMsT0FBQSxPQUNBQyxXQUFBLG1CQUFBLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLFlBQUFELE9DSEFOLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsVUFBQSxZQUFBLFNBQUFDLEVBQUFLLEVBQUFDLEdBQ0FOLEVBQUFPLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUosRUFBQUUsTUFBQUMsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBQyxRQUFBQyxJQUFBLGFBQ0FiLEVBQUFjLE1BQUEsUUFBQUgsRUFBQUksTUFDQVQsRUFBQVUsSUFBQSxNQUNBLFNBQUFDLEdBQ0FMLFFBQUFDLElBQUFJLFNDUkFyQixJQUFBRyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFrQixHQUVBQSxFQUFBQyxRQUFBQyxRQUFBLFNBQUFDLEdBQ0FULFFBQUFDLElBQUFRLEdBQ0FyQixFQUFBcUIsTUFBQUEsSUFHQXJCLEVBQUFzQixRQUFBLFdBQ0F0QixFQUFBdUIsVUFDQUwsRUFBQU0sUUFDQWhCLFNBQUEsWUFDQWlCLEtBQUF6QixFQUFBdUIsV0FDQUgsUUFBQSxTQUFBTSxHQUVBMUIsRUFBQXVCLFNBQUEsUUFLQXZCLEVBQUFDLElBQUEsY0FBQSxTQUFBQyxFQUFBd0IsR0FDQTFCLEVBQUEyQixPQUFBLFdBQ0EzQixFQUFBcUIsTUFBQU8sUUFBQUYsVUN0QkE5QixJQUFBaUMsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQVosTUFBQSxXQUNBLE1BQUFXLEdBQUFFLElBQUEsZUFHQUQsS0FBQVAsT0FBQSxTQUFBRSxHQUNBLE1BQUFJLEdBQUFKLEtBQUEsYUFBQUEsT0NOQTdCLFFBQUFDLE9BQUEsT0FDQW1DLFFBQUEsaUJBQUEsU0FBQUMsR0FFQUEsRUFDQUMsS0FBQSxLQUNBcEMsV0FBQSxZQUNBcUMsWUFBQSxlQUVBRCxLQUFBLGFBQ0FwQyxXQUFBLGVBQ0FxQyxZQUFBLGtCQUVBRCxLQUFBLFVBQ0FwQyxXQUFBLFlBQ0FxQyxZQUFBLGtCQ2RBdkMsUUFBQUMsT0FBQSxPQUNBK0IsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBTyxHQUFBTixJQUNBTSxHQUFBQyxRQUFBLFdBQ0EsTUFBQVIsR0FBQUUsSUFBQSxjQUdBSyxFQUFBOUIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFxQixHQUFBSixLQUFBLGlCQUNBbEIsU0FBQUEsRUFDQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBNkIsR0FHQSxNQUZBRixHQUFBRyxNQUFBRCxFQUFBeEIsS0FDQWUsRUFBQVcsU0FBQUMsUUFBQUMsT0FBQSxVQUFBSixFQUFBeEIsS0FDQXNCLEVBQUFDLGdCQ2RBekMsUUFBQUMsT0FBQSxPQUNBOEMsS0FBQSxhQUFBLFdBQUEsU0FBQUMsRUFBQUMsSUFDQSxRQUFBQyxLQUNBLEdBQUEvQixHQUFBLHNCQUNBZ0MsRUFBQSxHQUFBQyxXQUFBakMsRUFDQWdDLEdBQUFFLFFBQUEsU0FBQUMsR0FDQXZDLFFBQUFDLElBQUEscUNBQ0FpQyxFQUFBQyxFQUFBLE1BU0FDLEVBQUFJLFVBQUEsU0FBQUQsR0FDQXZDLFFBQUFDLElBQUFzQyxFQUNBLElBQUFFLEdBQUFDLEtBQUFDLE1BQUFKLEVBQUFwQyxLQUNBOEIsR0FBQVcsV0FBQSxNQUFBSCxFQUFBSSxNQUFBSixFQUFBdEMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nUm91dGUnXSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHNjb3BlKXtcblx0JHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKXtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHR9KVxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTdmMsICRsb2NhdGlvbil7XG5cdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XG5cdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0Y29uc29sZS5sb2coJ2xvZ2dlZCBpbicpO1xuXHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0JGxvY2F0aW9uLnVybCgnLycpXG5cdFx0fSwgZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xuXHRcdH0pXG5cdH1cbn0pIiwiXG5hcHAuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBQb3N0c1N2Yykge1xuXG4gICAgUG9zdHNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3RzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHBvc3RzKTtcbiAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHM7XG4gICAgfSlcblxuICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkc2NvcGUucG9zdEJvZHkpIHtcbiAgICAgICAgICAgIFBvc3RzU3ZjLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdkaWNrZXl4eHgnLFxuICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihwb3N0KSB7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgICRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24oXywgcG9zdCl7XG4gICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xuICAgICAgICB9KVxuICAgIH0pXG59KSIsImFwcC5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG4gICAgfVxuXG4gICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbihwb3N0KXtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KVxuICAgIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcblxuICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgIC53aGVuKCcvJywge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvcmVnaXN0ZXInLCB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9sb2dpbicsIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJ1xuICAgICAgICB9KVxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuXHR2YXIgc3ZjID0gdGhpcztcblx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpe1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJ2FwaS91c2VycycpXG5cdH1cblxuXHRzdmMubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuXHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fSkudGhlbihmdW5jdGlvbih2YWwpe1xuXHRcdFx0c3ZjLnRva2VuID0gdmFsLmRhdGE7XG5cdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YTtcblx0XHRcdHJldHVybiBzdmMuZ2V0VXNlcigpO1xuXHRcdH0pXG5cdH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAucnVuKGZ1bmN0aW9uKCRyb290U2NvcGUsICR0aW1lb3V0KSB7XG4gICAgICAgIChmdW5jdGlvbiBjb25uZWN0KCkge1xuICAgICAgICAgICAgdmFyIHVybCA9ICd3czovL2xvY2FsaG9zdDozMDAwJztcbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh1cmwpO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXZWJzb2NrZXQgY2xvc2VkLiBSZWNvbm5lY3RpbmcuLi4nKTtcbiAgICAgICAgICAgICAgICAkdGltZW91dChjb25uZWN0LCAxMCAqIDEwMDApO1xuICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgLy8gY29ubmVjdGlvbi5vbm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3RlZCcpO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3dzOicgKyBwYXlsb2FkLnRvcGljLCBwYXlsb2FkLmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpXG4gICAgfSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=